# -*- coding: utf-8 -*-
"""brain_tumor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pdQuCev5U5n80r8LYy4ZPRIfYMNEuRaV
"""

!pip install ultralytics --upgrade

from google.colab import drive
drive.mount('/content/drive')

# Correctly copy the zip file from Google Drive to Colab
!cp "/content/drive/MyDrive/tumordetection.zip" "/content/"

# Unzip the file
import zipfile
with zipfile.ZipFile("/content/tumordetection.zip", 'r') as zip_ref:
    zip_ref.extractall("/content/")

!ls /content

from ultralytics import YOLO

model = YOLO("yolo11n.pt")

train_results = model.train(
    data="/content/tumordetection/data.yaml",  # âœ… correct path
    epochs=20,
    imgsz=640,
    device=0
)

!ls /content/runs/detect/train8/weights #to check where is the model in train 8 (mostly saved in best.pt)

from google.colab import files
uploaded = files.upload()

from ultralytics import YOLO
                                          #IMAGE PREDICTION

# Load trained model
model = YOLO("/content/runs/detect/train8/weights/best.pt")

# Run prediction on image on your desktop saved as t.jpg
results = model.predict("t.jpg", conf=0.05,save=True)
print("model running done")

import os
from IPython.display import Image, display
                                                      #IMAGE PREDICTION DISPLAY(BOUNDING BOXES)
# Path to the YOLO output folder
output_dir = "runs/detect/predict9"

# List and sort output files
output_files = sorted(os.listdir(output_dir))

# Pick the most recent output image
last_output_image = os.path.join(output_dir, output_files[-1])

# Display it in Colab
display(Image(filename=last_output_image))

#IMAGE SEGMENTATION
#use YOLO output as input to SAM2 (Segment Anything Model v2), you need to convert the YOLO detection results (bounding boxes) into prompts for SAM
from ultralytics import YOLO, SAM

# Load models
yolo_model = YOLO("runs/detect/train8/weights/best.pt")
sam_model = SAM("sam2_b.pt")

# Predict on a single image
results = yolo_model("t.jpg")  # Always returns a list, even for one image
result = results[0]            # Get the single result


# Run SAM on each YOLO result
for result in results:
    boxes = result.boxes.xyxy  # Get bounding boxes
    sam_results = sam_model(
        result.orig_img,
        bboxes=boxes,
        verbose=False,
        save=True,
        device="cuda:0"  # or "cpu"
    )

import os
from IPython.display import Image, display

# Correct path to the folder where YOLO + SAM saved the output
output_dir = "runs/segment/predict2"

# List all files in the output directory
output_files = sorted(os.listdir(output_dir))

# Pick the last image (you can change the index or name if needed)
last_output_image = os.path.join(output_dir, output_files[-1])

# Display it
display(Image(filename=last_output_image))

